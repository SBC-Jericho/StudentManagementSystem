@page "/single-book"
@page "/single-book/{id:int}"
@inject IClientBookService ClientBookService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (Id == 0)
{
    <PageTitle>Create new Book</PageTitle>
    <h3>Create new Book</h3>
}
else
{
    <PageTitle>Edit @book.Title</PageTitle>
    <h3>Edit @book.Title</h3>
}

<EditForm Model="bookDTO" OnValidSubmit="HandleSubmit">
    @if (Id == 0)
    {
        <DataAnnotationsValidator />
    }
    <MudCard>
        <MudCardContent>

            <MudTextField
                Label="Title" 
                @bind-Value="bookDTO.Title"
                For="@(() => bookDTO.Title)"
            />

            <MudTextField 
                Label="Description" 
                @bind-Value="bookDTO.Description"
                For="@(() => bookDTO.Description)" 
            />

        </MudCardContent>
    </MudCard>
    <MudButton ButtonType="ButtonType.Submit" Class="mt-4" Color="Color.Primary" Variant="Variant.Filled">
        @btnText
    </MudButton>
    <ValidationSummary />
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }

    string btnText = string.Empty;

    public Book book = new Book();
    public BookDTO bookDTO = new BookDTO();
    public List<Book> bookList = new List<Book>();


    protected override async Task OnInitializedAsync()
    {
        btnText = Id == 0 ? "Save new Book" : "Update Book";
        await ClientBookService.GetAllBook();

    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Book? result = await ClientBookService.GetSingleBook(Id);
            if (result is not null)
            {
                book = result;
            }
            else
            {
                NavigationManager.NavigateTo("/single-book");
            }

        }
    }

    async Task HandleSubmit()
    {
        if (Id == 0)
        {
            if (!string.IsNullOrEmpty(bookDTO.Title) && !bookList.Any(s => s.Title == bookDTO.Title))
            {
                await ClientBookService.AddBook(bookDTO);
                StateHasChanged();
                Snackbar.Add(
                "Added Book Successfully!",
                Severity.Success,
                config =>
                    {
                        config.ShowTransitionDuration = 200;
                        config.HideTransitionDuration = 400;
                        config.VisibleStateDuration = 2500;
                    });

            }
            else if (bookList.Any(s => s.Title == bookDTO.Title))
            {
                Snackbar.Add(
                   "Book Already Exist",
                   Severity.Warning, // Change Severity to Error for no subject added
                   config =>
                   {
                       config.ShowTransitionDuration = 200;
                       config.HideTransitionDuration = 400;
                       config.VisibleStateDuration = 2500;
                   });

                NavigationManager.NavigateTo("/single-book");
            }
            else
            {
                await ClientBookService.UpdateBook((int)Id, book);
            }
        }
    }

    async Task DeleteBook()
    {
        await ClientBookService.DeleteBook(book.Id);
        StateHasChanged();
    }

}
