@page "/login"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject IClientStudentService ClientCharacterService
@inject IClientAuthService ClientAuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@layout AuthLayout


<h3>Login</h3>

@if (errorMessage != null)
{
    <p class="text-danger">@errorMessage</p>
}

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>

            <MudTextField 
                Label="Email"
                Variant="Variant.Outlined"  
                @bind-Value="user.Email"
                For="@(() => user.Email)"
                OnlyValidateIfDirty="true" 
            />

            <MudTextField 
                Label="Password"
                Variant="Variant.Outlined"
                InputType="@PasswordInput"
                Adornment="Adornment.End" 
                AdornmentIcon="@PasswordInputIcon"
                OnAdornmentClick="ShowPasswordButton"
                AdornmentAriaLabel="Show Password"
                @bind-Value="user.Password"
                For="@(() => user.Password)"
                OnlyValidateIfDirty="true" 
            />

            <MudButton 
                ButtonType="ButtonType.Submit"
                Class="mt-4" Color="Color.Primary"
                Variant="Variant.Filled">
                Login
            </MudButton>

            <MudButton 
                OnClick="NavigateRegister" 
                ButtonType="ButtonType.Submit"
                Class="mt-4" Color="Color.Success"
                Variant="Variant.Filled">
                Register
            </MudButton>

        </MudCardContent>
    </MudCard>
</EditForm>

@code {

    userLoginDTO user = new userLoginDTO();
    private string errorMessage;
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowPasswordButton()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    async Task HandleLogin()
    {
        var response = await ClientAuthService.Login(user);
        var token = ClientAuthService.token.value;

        if (response == "success")
        {
            await LocalStorage.SetItemAsync("token", token);

            var auth_state = await AuthStateProvider.GetAuthenticationStateAsync();

            if (auth_state.User.IsInRole("Admin"))
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
            Snackbar.Add(
           "Login Successfully!",
           Severity.Success,
           config =>
           {
               config.ShowTransitionDuration = 200;
               config.HideTransitionDuration = 400;
               config.VisibleStateDuration = 2500;
           });
        }
        else
        {
            errorMessage = response;
            StateHasChanged();
        }

    }

    private void NavigateRegister()
    {
        NavigationManager.NavigateTo("register-user");

    }


}
