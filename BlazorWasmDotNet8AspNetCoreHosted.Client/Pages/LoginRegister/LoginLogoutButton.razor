@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject ISnackbar Snackbar


<MudButton 
    OnClick="Logout"
    Class="mt-4"
    Color="Color.Error"
    Variant="Variant.Filled"
    Size="Size.Small">Logout
</MudButton>

<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Are you sure you want to logout?
    </MessageContent>
    <YesButton>
        <MudButton 
            Variant="Variant.Filled" 
            Color="Color.Error"
            Size="Size.Small">
            Logout
        </MudButton>
    </YesButton>
</MudMessageBox>

@code {
    MudMessageBox mbox { get; set; }
    string state = "Message box hasn't been opened yet";
    void Login()
    {
        NavigationManager.NavigateTo("login");
    }

    async Task Logout()
    {
        bool? result = await mbox.Show();
        state = result == null ? "No" : "Yes";
        if (state == "Yes")
        {
            await LocalStorage.RemoveItemAsync("token");
            await AuthStateProvider.GetAuthenticationStateAsync();

            NavigationManager.NavigateTo("login");

            Snackbar.Add(
                 "Logout Successfully!",
                 Severity.Success,
                 config =>
                 {
                     config.ShowTransitionDuration = 200;
                     config.HideTransitionDuration = 400;
                     config.VisibleStateDuration = 2500;
                 });
        }
    }
}
