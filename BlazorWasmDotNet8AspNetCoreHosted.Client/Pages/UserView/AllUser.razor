@page "/all-user"

@inject IClientAuthService ClientAuthService
@inject IClientUserService ClientUserService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Users</PageTitle>

<h1>Users</h1>
<AuthorizeView Roles="Admin">
    <Authorized>
        <div style="position: absolute; right: 50px;">
            <MudButton 
                @onclick="CreateNewUser" 
                StartIcon="@Icons.Material.Filled.Add" 
                Color="Color.Primary" 
                Variant="Variant.Filled">
                Add User
            </MudButton>
        </div>
        <br />  
        <br />
    </Authorized>
</AuthorizeView>

<MudTable Items="ClientUserService.Users" Hover="true" Striped="true" Dense="true" Class="mb-2" Filter="new Func<User,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">

    <ToolBarContent>
        <MudSpacer/>

        <MudTextField 
            @bind-Value="searchString1" 
            Placeholder="Search" 
            Adornment="Adornment.Start" 
            AdornmentIcon="@Icons.Material.Filled.Search" 
            IconSize="Size.Medium" 
            Class="mt-0">
        </MudTextField>

    </ToolBarContent>

    <HeaderContent>
        <MudTh>Image</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Role</MudTh>
    </HeaderContent>

    <RowTemplate Context="userDetails">

        @if (userDetails.Role == "Admin")

        {

            <MudTd DataLabel="Image">
                <MudAvatar>
                    <MudImage Src="@userDetails.Avatar"></MudImage>
                </MudAvatar>
            </MudTd>
        }
        else if (userDetails.Role == "Student" && userDetails.Students != null)

        {
            <MudTd DataLabel="Image">
                <MudAvatar>
                    <MudImage Src="@userDetails.Students.Image"></MudImage>
                </MudAvatar>
            </MudTd>

        }

        else if (userDetails.Role == "Professor" && userDetails.Professor != null)

        {

            <MudTd DataLabel="Image"><MudAvatar Image="@userDetails.Professor.Image"></MudAvatar></MudTd>

        }

        <MudTd DataLabel="Email">

            @userDetails.Email

        </MudTd>

        <MudTd DataLabel="Role">

            @userDetails.Role

        </MudTd>

        <AuthorizeView Roles="Admin">
            <Authorized>
                
                <MudTd DataLabel="Edit">
                    <MudIconButton 
                        OnClick="(() => EditUser(userDetails.Id, userDetails.Role))"
                        Icon="@Icons.Material.Filled.Edit"
                        Color="Color.Primary"
                        Variant="Variant.Filled" />
                </MudTd>
                
            </Authorized>
        </AuthorizeView>

        <MudTd DataLabel="Delete">
            <MudIconButton 
                OnClick="(() => DeleteUser(userDetails.Id))"
                Icon="@Icons.Material.Filled.Delete"
                Color="Color.Error"
                Variant="Variant.Filled"></MudIconButton>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<p style="height:500px;"></p>

@code 
{
    private string searchString1 = "";
    private User selectedItem1 = null;
    private HashSet<User> selectedItems = new HashSet<User>();

    private IEnumerable<User> Users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        await ClientUserService.GetAllUser();
    }

    private bool FilterFunc1(User user) => FilterFunc(user, searchString1);

    private bool FilterFunc(User user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    void CreateNewUser()
    {
        NavigationManager.NavigateTo("/register-user");
    }

    async Task EditUser(int id, string role)
    {

        int userId = await ClientUserService.GetUserIdbyRole(id, role);

        Console.WriteLine(userId);
        if(role == "Student")
        {
            NavigationManager.NavigateTo($"single-Student/{userId}");
        }
        else if (role == "Professor")
        {
            NavigationManager.NavigateTo($"single-professor/{userId}");
        }
    }

    async Task DeleteUser(int id)
    {
        await ClientUserService.DeleteUser(id);
        StateHasChanged();
        Snackbar.Add(
        "User Deleted",
        Severity.Success,
        config =>
        {
            config.ShowTransitionDuration = 200;
            config.HideTransitionDuration = 400;
            config.VisibleStateDuration = 2500;
        });
    }

}
1