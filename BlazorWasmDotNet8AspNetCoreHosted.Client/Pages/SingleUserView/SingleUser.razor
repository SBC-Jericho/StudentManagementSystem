@page "/user-view/{id:int}"
@page "/user-view"

@inject HttpClient Http
@inject IClientStudentService clientStudentService
@inject IClientAuthService ClientAuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@* <h3>GetSingleStudent</h3>

@student.Address

@userRole

<EditForm Model="user" OnValidSubmit="HandleSubmit">

    <DataAnnotationsValidator />

    <MudCard>


        <MudCardContent>

            <MudTextField Label="FirstName" @bind-Value="@user"
                          For="@(() => student.FirstName)">

            </MudTextField>

            <p>@userId</p>

            <MudTextField Label="LastName" @bind-Value="@student.LastName"
                          For="@(() => student.FirstName)">

            </MudTextField>

            <MudTextField Label="Contact" @bind-Value="@student.Contact"
                          For="@(() => student.Contact)">

            </MudTextField>

            <MudTextField Label="Address" @bind-Value="@student.Address"
                          For="@(() => student.Address)">

            </MudTextField>

            <MudTextField Label="BirthDate" @bind-Value="@student.BirthDate"
                          For="@(() => student.BirthDate)">

            </MudTextField>

            <MudImage Src="@student.Image" Elevation="25" Class="rounded my-2"></MudImage>

            <br />

            <InputFile id="fileInput" OnChange="OnFileChange" hidden />

            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload"
                       for="fileInput">

                Upload Image

            </MudButton>

        </MudCardContent>

    </MudCard>

    <br />

    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Class="mr-2">Update Student</MudButton>
 *@
@* </EditForm> *@
 

@* <MudTable Items="clientStudentService.students" Hover="true" Striped="true" Dense="true" Class="mb-2">

    <HeaderContent>

        <MudTh>Image</MudTh>

        <MudTh>First Name</MudTh>

        <MudTh>Last Name</MudTh>

        <MudTh>Contact</MudTh>

        <MudTh>Address</MudTh>

        <MudTh>Birth Date</MudTh>

        <MudTh>Actions</MudTh>

    </HeaderContent>

    <RowTemplate Context="userDetails">

        @if (userDetails != null)

        {

            <MudTd DataLabel="Image"><MudAvatar Image="@userDetails.Image"></MudAvatar></MudTd>

            <MudTd DataLabel="FirstName">

                @userDetails.FirstName

            </MudTd>

            <MudTd DataLabel="LastName">

                @userDetails.LastName

            </MudTd>

            <MudTd DataLabel="Contact">

                @userDetails.Contact

            </MudTd>

            <MudTd DataLabel="Address">

                @userDetails.Address

            </MudTd>

            <MudTd DataLabel="Birth Date">

                @userDetails.BirthDate

            </MudTd>

            @* <MudTd>

                <MudIconButton OnClick="() => editStudent(userDetails.Id)"

                               Icon="@Icons.Material.Filled.Edit"

                               Color="Color.Primary"

                               Variant="Variant.Filled"></MudIconButton>

            </MudTd> *@

        }

@*  </RowTemplate>

</MudTable> *@



@code {

    // [Parameter]

    // public int Id { get; set; }

    // string btnText = string.Empty;

    // bool isNew = true;

    // public User user = new User();

    // public int studentId;

    // public string userRole;


    // protected override async Task OnParametersSetAsync()
    // {
    //     if (Id is not null)
    //     {
    //         var result = await ClientAuthService.GetSingleUser((int)Id);
    //         if (result is not null)
    //             user = result;
    //         else
    //             NavigationManager.NavigateTo("/single-student");

    //     }
    // }
    // async Task HandleSubmit()

    // {

    //     await ClientAuthService.UpdateStudent((int)Id, user);

    //     Snackbar.Add(

    //         "Update Student Successfully",

    //         Severity.Success,

    //     config =>

    //     {

    //         config.ShowTransitionDuration = 200;

    //         config.HideTransitionDuration = 400;

    //         config.VisibleStateDuration = 2500;

    //     });

    // }


    // async Task OnFileChange(InputFileChangeEventArgs e)

    // {

    //     var format = "image/png";

    //     var resizedImage = await e.File.RequestImageFileAsync(format, 200, 200);

    //     var buffer = new byte[resizedImage.Size];

    //     await resizedImage.OpenReadStream().ReadAsync(buffer);

    //     var imageData = $"data:{format}; base64, {Convert.ToBase64String(buffer)}";

    //     student.Image = imageData;

    // }

}
