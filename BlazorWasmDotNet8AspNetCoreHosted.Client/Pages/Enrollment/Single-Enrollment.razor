@page "/single-enrollment"
@page "/single-enrollment/{id:int}"

@inject IClientSubjectService ClientSubjectService
@inject IClientEnrolledSubjectsService ClientEnrolledSubjectsService
@inject IClientStudentService ClientStudentService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (Id == null)
{
    <PageTitle>Add Enrollment Subject</PageTitle>
    <h3>Add Enrollment Subject</h3>
}
else
{
    <PageTitle>Edit Enrollment Subject</PageTitle>
    <h3>Edit Enrollment Subject</h3>
}

<EditForm Model="enrollmentDTO" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
 
    <MudTextField Label="Semester" 
                  @bind-Value="enrollmentDTO.Semester"
                  For="@(() => enrollmentDTO.Semester)"/>

    <MudTextField Label="School Year" 
                  @bind-Value="enrollmentDTO.SchoolYear"
                  For="@(() => enrollmentDTO.SchoolYear)"/>

    <MudDatePicker Label="Date Created" 
                   @bind-Date="enrollmentDTO.DateCreated"/>

    <div class="d-flex">
        <div class="flex-grow-1">
            <MudSelect Label="Subjects" @bind-Value="subject.Id">
                <MudSelectItem Value="0">Select Subject</MudSelectItem>
                @foreach (var subjects in ClientSubjectService.ClientSubject)
                {
                    <MudSelectItem Value="subjects.Id">@subjects.Name</MudSelectItem>
                }
            </MudSelect>
        </div>

        <div class="ml-2 mt-4">
            <!-- Added mt-4 for top margin -->
            <MudButton OnClick="AddSubject" 
                Disabled="subject.Id == 0 ? true : false"
                ButtonType="ButtonType.Button" 
                Color="Color.Primary" 
                Variant="Variant.Filled">
                Add Subject
            </MudButton>

        </div>
    </div>

   @*  <MudSelect Label="Subjects" @bind-Value="subject.Id">
        <MudSelectItem Value="0">Select Subject</MudSelectItem>
        @foreach (var subjects in ClientSubjectService.ClientSubject)
        {
            <MudSelectItem Value="subjects.Id">@subjects.Name</MudSelectItem>
        }
    </MudSelect>

    <MudButton OnClick="AddSubject" ButtonType="ButtonType.Button" Class="mt-4" Color="Color.Primary" Variant="Variant.Filled">
        Add Subject
    </MudButton> *@
    <br />
    <div style="border-bottom: 2px solid black; margin-top: 20px; margin-bottom: 20px;"></div>
    <br/>

    <h3>Subjects Enrolled</h3>

    <MudTable Items="EnrolledSubjectsList" 
              Hover="true" 
              Striped="true" 
              Dense="true" 
              Class="mb-2">

        <HeaderContent>
            <MudTh>Subject Name</MudTh>
        </HeaderContent>
            <RowTemplate Context="subject">

                <MudTd Class="text-center pt-sm-3 pb-sm-3" 
                    DataLabel="Subject">@ClientSubjectService.ClientSubject.First(s => s.Id == subject.SubjectId).Name
                </MudTd>

           <MudTd>
                <MudButton OnClick="@(() => RemoveSubject(subject.SubjectId))"
                           Icon="@Icons.Material.Filled.Remove"
                           Size="Size.Small" 
                           ButtonType="ButtonType.Button" 
                           Class="mt-4" 
                           Color="Color.Error" 
                           Variant="Variant.Filled">
                    Remove
                </MudButton>
           </MudTd>
        </RowTemplate>

    </MudTable>

    <MudButton 
        ButtonType="ButtonType.Submit" 
        Class="mt-4" Color="Color.Primary" 
        Variant="Variant.Filled">
        Enroll
    </MudButton>


    <ValidationSummary />
</EditForm>
    @code {

    [Parameter]
    public int Id { get; set; }

    EnrollmentDTO enrollmentDTO = new EnrollmentDTO();

    EnrolledSubjectsDTO enrolledSubjectsDTO = new EnrolledSubjectsDTO();

    Subject subject = new Subject();

    Student student = new Student();

    // private Dictionary<int, string> subjectNames = new Dictionary<int, string>();

    List<EnrolledSubjectsDTO> EnrolledSubjectsList = new List<EnrolledSubjectsDTO>();
    protected override async Task OnInitializedAsync()
    {
        await ClientSubjectService.GetAllSubject();
    }
    private void RemoveSubject(int id)
    {
        var prodDelete = EnrolledSubjectsList.Find(c => c.SubjectId == id);

        var selectedProduct = EnrolledSubjectsList
            .FirstOrDefault(product => product.SubjectId == id);

        if (prodDelete != null)
        {
            Snackbar.Add($"{ClientSubjectService.ClientSubject.First(s => s.Id == prodDelete.SubjectId).Name} has been removed.", Severity.Error, config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });
            EnrolledSubjectsList.Remove(prodDelete);
        }
    }

    private void AddSubject()
    {
        if (!EnrolledSubjectsList.Any(s => s.SubjectId == subject.Id))
        {
            enrolledSubjectsDTO.SubjectId = subject.Id;
            EnrolledSubjectsList.Add(enrolledSubjectsDTO);
            enrolledSubjectsDTO = new EnrolledSubjectsDTO();
        }
        else
        {
            Snackbar.Add("Subject already exists on the list.", Severity.Warning, config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });
        }

    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            var result = await ClientStudentService.GetSingleStudent((int)Id);
            if (result is not null)
                student = result;
            else
                NavigationManager.NavigateTo("/all-enrollment");

        }

    }

    async Task HandleSubmit()
    {
        if (Id != 0)
        {
            enrollmentDTO.StudentId = Id;
        }
       
        enrollmentDTO.EnrolledSubjects = EnrolledSubjectsList;
        await ClientEnrolledSubjectsService.AddEnrolledSubject(enrollmentDTO);
        StateHasChanged();
        NavigationManager.NavigateTo("/all-enrollment");

    }

    async Task DeleteSubject()
    {
        await ClientSubjectService.DeleteSubject(subject.Id);
        StateHasChanged();
    }
}
