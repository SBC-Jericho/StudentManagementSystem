@page "/all-student"
@inject IClientStudentService ClientStudentService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
<PageTitle>Student</PageTitle>


<h1>Student</h1>

<MudTable Items="ClientStudentService.ClientStudent" Hover="true" Striped="true" Dense="true" Class="mb-2" Filter="new Func<Student,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
   
    <ToolBarContent>
        <MudSpacer />

        <MudTextField 
            @bind-Value="searchString1" 
            Placeholder="Search" 
            Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" 
            IconSize="Size.Medium" 
            Class="mt-0"
         />

    </ToolBarContent>

    <HeaderContent>

        <MudTh></MudTh>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Birthday</MudTh>
        <MudTh>Contact</MudTh>
        <MudTh>Address</MudTh>

    </HeaderContent>
    <RowTemplate Context="std">
        <MudTd DataLabel="Image"><MudAvatar Image="@std.Image" /></MudTd>
        <MudTd DataLabel="First Name">@std.FirstName</MudTd>
            <MudTd DataLabel="Last Name">@std.LastName</MudTd>
            <MudTd DataLabel="BirthDate">@std.BirthDate</MudTd>
            <MudTd DataLabel="Contact">@std.Contact</MudTd>
            <MudTd DataLabel="Address">@std.Address</MudTd>

            <AuthorizeView Roles="Admin">
                <Authorized>

                    <MudTd DataLabel="Edit">
                        <MudIconButton 
                            OnClick="(() => EditStudent(std.Id))"
                            Icon="@Icons.Material.Filled.Edit"
                            Color="Color.Primary"
                            Variant="Variant.Filled"/>
                    </MudTd>

                </Authorized>
            </AuthorizeView>
        </RowTemplate>

    </MudTable>
   
    <p style="height:500px;"></p>
    @code {

    private string searchString1 = "";
    private Student selectedItem1 = null;
    private HashSet<Student> selectedItems = new HashSet<Student>();

    private IEnumerable<Student> Students = new List<Student>();
    // lifecycle method
    protected override async Task OnInitializedAsync()
    {
        Students = await ClientStudentService.GetAllStudent();
        Console.WriteLine("Hello from all-student page");
    }

    private bool FilterFunc1(Student student) => FilterFunc(student, searchString1);

    private bool FilterFunc(Student student, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (student.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (student.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{student.BirthDate} {student.Contact} {student.Address}".Contains(searchString))
            return true;
        return false;
    }

    void EditStudent(int id)
    {
        //Navigate the user to another page - inject  NavigationManager NavigationManager
        NavigationManager.NavigateTo($"single-Student/{id}");
    }

    void CreateNewStudent()
    {
        NavigationManager.NavigateTo("/register-user");
    }
}
