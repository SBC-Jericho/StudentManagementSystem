@page "/all-professor"
@inject IClientProfessorService ClientProfessorService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
<PageTitle>Professor</PageTitle>


<h1>Professor</h1>

<MudTable Items="ClientProfessorService.ClientProfessor" Hover="true" Striped="true" Dense="true" Class="mb-2" Filter="new Func<Professor,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">

    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Birthday</MudTh>
        <MudTh>Contact</MudTh>
        <MudTh>Address</MudTh>
    </HeaderContent>
    <RowTemplate Context="professor">
        <MudTd DataLabel="Image"><MudAvatar Image="@professor.Image" /></MudTd>
        <MudTd DataLabel="First Name">@professor.FirstName</MudTd>
            <MudTd DataLabel="Last Name">@professor.LastName</MudTd>
            <MudTd DataLabel="BirthDate">@professor.BirthDate</MudTd>
            <MudTd DataLabel="Contact">@professor.Contact</MudTd>
            <MudTd DataLabel="Address">@professor.Address</MudTd>
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <MudTd DataLabel="Edit">
                        <MudIconButton 
                            OnClick="(() => EditProfessor(professor.Id))"
                            Icon="@Icons.Material.Filled.Edit"
                            Color="Color.Primary"
                            Variant="Variant.Filled"/>
                    </MudTd>
                </Authorized>
            </AuthorizeView>
        </RowTemplate>

    </MudTable>
    <p style="height:500px;"></p>
    @code {

    private string searchString1 = "";
    private Professor selectedItem1 = null;
    private HashSet<Professor> selectedItems = new HashSet<Professor>();
    private IEnumerable<Professor> Users = new List<Professor>();

    // lifecycle method
    protected override async Task OnInitializedAsync()
    {
        await ClientProfessorService.GetAllProfessor();
    }

    private bool FilterFunc1(Professor professor) => FilterFunc(professor, searchString1);

    private bool FilterFunc(Professor professor, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (professor.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (professor.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{professor.BirthDate} {professor.Contact} {professor.Address}".Contains(searchString))
            return true;
        return false;
    }
    void EditProfessor(int id)
    {
        //Navigate the user to another page - inject  NavigationManager NavigationManager
        NavigationManager.NavigateTo($"single-professor/{id}");
    }

    void CreateNewProfessor()
    {
        NavigationManager.NavigateTo("/register-user");
    }
}
