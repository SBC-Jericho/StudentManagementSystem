@page "/groupchat"
@page "/groupchat/{GroupchatId:int}"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IClientChatMessageService ClientChatMessageService
@inject IClientUserService ClientUserService
@inject IClientGroupChatService ClientGroupChatService
@inject ISnackbar _snackBar
@inject IJSRuntime _jsRuntime
@inject IDialogService DialogService

@rendermode InteractiveWebAssembly

<h3>Group Chat</h3>

<div class="d-flex flex-grow-1 flex-row">

    <MudPaper Elevation="25" Class="pa-3 ml-6 col-md-3" >

        <MudToolBar Dense="true">
            @* <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText> *@
            <MudText Typo="Typo.h6">CHAT ROOMS</MudText>
             <div style="position: absolute; right: 50px; width: 30px; height: 30px; border-radius: 50%;"

             <MudIconButton 
                    OnClick="@OpenUsers"
                    Icon="@Icons.Material.Filled.Add"
                    Color="Color.Inherit"
                    Variant="Variant.Filled"
                    Size="Size.Small"
                />
            </div>
        </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
            <MudList Clickable="true">
                @foreach (var groupChat in GroupChatList)
                {
                        <MudListItem Class="pa-0 px-2" OnClick="@(() => LoadGroupChat(groupChat.Id))">
                            <MudDivider />
                            @groupChat.Name
                            <MudDivider/>

                    </MudListItem> 
                }
            </MudList>
        </div>
    </MudPaper>

    <MudPaper Elevation="25" Class="py-4 flex-grow-1 col-md-6">

        <MudToolBar Dense="true">

           <MudText Typo="Typo.h6">@ToolBarText</MudText> 

        </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height:65vh;min-height:65vh; overflow:scroll;" id="chatContainer">

            @foreach (var message in groupChatMessage)
            {
                <div class="d-flex flex-row my-4">


                    @if (message.User.Id.ToString() == CurrentUserId)
                        {
                            <!-- Other user's message, display on the left -->
                            <div class="ml-auto mr-4">
                                <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">
                                    <MudImage Src="@message.User.Avatar"></MudImage>
                                </MudAvatar>
                            </div>

                            <div class="text-right">

                                <MudText 
                                Typo="Typo.body1">
                                    @message.User.Email
                                </MudText>

                                <MudText 
                                Typo="Typo.caption" 
                                Style="font-size: xx-small!important;">
                                    @message.Timestamp
                                </MudText>

                                <MudText Typo="Typo.body2" Style="padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">
                                    @message.Content
                                </MudText>
                            </div>

                        }

                        else
                        {
                            <!-- Other user's message, display on the right -->
                            <div class="mr-4">
                                <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">
                                    <MudImage Src="@message.User.Avatar"></MudImage>
                                </MudAvatar>
                            </div>

                            <div>

                                <MudText Typo="Typo.body1">
                                    @message.User.Email
                                </MudText>

                                <MudText Typo="Typo.caption"
                                Style="font-size: xx-small!important;">
                                    @message.Timestamp
                                </MudText>

                                <MudText Typo="Typo.body2" Style="padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">
                                    @message.Content
                                </MudText>
                            </div>

                        }
                   
                </div>
            }
        </div>
            <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">

                <MudTextField T="string"
                              Placeholder="Enter your message..."
                              DisableUnderLine="true"
                              Class="mt-n2 mx-4"
                              @bind-Value="CurrentMessage"
                              For="@(()=> CurrentMessage)" />

                @if (GroupchatId == 0)
                {
                    <MudButton OnClick="SubmitAsync"
                               Disabled="true"
                               StartIcon="@Icons.Material.Outlined.Send"
                               Color="Color.Secondary"
                               ButtonType="ButtonType.Button">
                        Send
                    </MudButton>
                }
                else
                {
                    <MudButton OnClick="SubmitAsync"
                               StartIcon="@Icons.Material.Outlined.Send"
                               Color="Color.Secondary"
                               ButtonType="ButtonType.Button">
                        Send
                    </MudButton>
                }
               

            </MudPaper>
   </MudPaper>

    <MudPaper Elevation="25" Class="pa-3 ml-6 col-md-3">

        <MudToolBar Dense="true">
            <MudText Typo="Typo.h6" Inline="true" Class="mr-2"></MudText>
            

            <MudSelect T="int" Label="Users" MultiSelection="true" @bind-SelectedValues="selectedUserIdsInt">
                @foreach (User user in getGroupNotMembers)
                {
                    <MudSelectItem T="int" Value="@user.Id">@user.Email</MudSelectItem>
                }
            </MudSelect>

            <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => AddUser(selectedUserIdsInt, GroupchatId))"></MudIconButton>

             @* <MudSelect
                T="User"
                ToStringFunc="@((User user) => user.Email)"
                Label="Users"
                MultiSelection=true
                @bind-SelectedValues="selectedUserIds">

                    @foreach (User user in getGroupNotMembers)
                    {
                    <MudSelectItem T="User" Value="@user">@user.Email</MudSelectItem>
                    }
            </MudSelect>    *@
            
            @* <div style="right: 50px; width: 30px; height: 30px; border-radius: 50%;"

            <MudIconButton
                OnClick="AddUser"
                Icon="@Icons.Material.Filled.Add"
                Color="Color.Primary"
                Variant="Variant.Filled"
                Size="Size.Small" />
                </div> *@
        </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
            <MudList Clickable="true">
                @foreach (var groupMember in getGroupMembers)
                {
                    <MudListItem Class="pa-0 px-2">
                        <div class="d-flex flex-row mt-n1 mb-n1">

                                <MudAvatar 
                                    Class="mb-4"
                                    Color="Color.Secondary"  
                                    Style="height:50px; width:50px;">
                                    <MudImage Src="@groupMember.Avatar"></MudImage>
                                </MudAvatar>

                            <div>
                                <MudText Typo="Typo.body2" Class="mt-3 mb-n2 ml-2">@groupMember.Email</MudText>
                                <MudText Typo="Typo.body2" Class="mt-3 mb-n2 ml-2">@groupMember.Id</MudText>

                            </div>
                            <div style="position: absolute; right: 50px; width: 30px; height: 30px; border-radius: 50%;">
                                <MudTd DataLabel="Delete">
                                    <MudIconButton 
                                        OnClick="(() => DeleteUserToGroup(groupMember.Id, GroupchatId))"
                                        Icon="@Icons.Material.Filled.Delete"
                                        Color="Color.Error"
                                        Variant="Variant.Filled">
                                    </MudIconButton>
                                </MudTd>
                                </div> 
                        </div>
                    </MudListItem>
                }
            </MudList>
        </div>
    </MudPaper>

</div>

@code 
{
    [Parameter]
    public int GroupchatId { get; set; }
    [Parameter]
    public string CurrentMessage { get; set; }
    [Parameter]
    public string CurrentUserId { get; set; }
    [Parameter]
    public string CurrentGroupName{ get; set; }
    [Parameter]
    public string CurrentUserEmail { get; set; }

    [CascadingParameter]
    private HubConnection hubConnection { get; set; }
    public List<GroupChat> GroupChatList = new List<GroupChat>();

    private IEnumerable<User> selectedUserIds { get; set; } = new HashSet<User>();
    private IEnumerable<int> selectedUserIdsInt { get; set; } = new HashSet<int>();

    public List<GroupChatMessage> groupChatMessage = new List<GroupChatMessage>();

    public List<User> getGroupMembers = new List<User>();
    public List<User> getGroupNotMembers = new List<User>();

    public string ToolBarText { get; set; } = "Chat Rooms";

    private bool IsHubConnected => hubConnection?.State == HubConnectionState.Connected;


    protected override async Task OnInitializedAsync()
    {
        GroupChatList = await ClientGroupChatService.GetAllGroupsForUser();

        CurrentUserId = await ClientUserService.GetSingleUserId();

        CurrentUserEmail = await ClientUserService.GetSingleUserName();

        await ClientUserService.GetAllUser();

        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/chathub")).WithAutomaticReconnect().Build();
        }

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }



        hubConnection.On<GroupChat>("ReceiveNewGroupChat", async (newGroupChat) =>
        {
            // Handle the new group chat notification
            GroupChatList.Add(newGroupChat);
            getGroupMembers.AddRange(newGroupChat.Paticipants);
            Console.WriteLine($"GC add: {newGroupChat.Name}");
            StateHasChanged();
        });

        hubConnection.On<User>("ReceiveUserToAdd", async (message) =>
       {
           Console.WriteLine("Received Message Connected: Connection ID: " + hubConnection.ConnectionId);

           getGroupMembers.Add(new User
               {
                   Email = message.Email,
                   Avatar = message.Avatar,
                   Id = message.Id
               });


           StateHasChanged();
           Console.WriteLine($"Added user {message.Email}");
       });

        hubConnection.On<int>("RemoveUser", async (userId) =>
        {

            getGroupMembers.RemoveAll(user => user.Id == userId);

            Console.WriteLine($"User removed: {userId}");

            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<GroupChatMessage>("ReceivedGroupMessage", async (message) =>
         {

             if (GroupchatId == message.GroupChatId)
             {
                 groupChatMessage.Add(new GroupChatMessage
                     {
                         Content = message.Content,
                         Timestamp = message.Timestamp,
                         User = new User() { Email = message.User.Email}

                     });

             }   
             await InvokeAsync(StateHasChanged);

         });


        if (!string.IsNullOrEmpty(GroupchatId.ToString()))
        {
            await LoadGroupChat(GroupchatId);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
    }

    public async Task SubmitAsync()
    {
        string currenGroupSelected = await ClientGroupChatService.GetSingleGroupName(GroupchatId);

        if (hubConnection.State == HubConnectionState.Connected)
        {
            if (!string.IsNullOrEmpty(CurrentMessage) && GroupchatId != 0)
            {
                //Save Message to DB
                var chatHistory = new GroupChatMessage()
                    {
                        Content = CurrentMessage,
                        GroupChatId = GroupchatId,
                        Timestamp = DateTime.Now,

                    };
                await ClientGroupChatService.SaveMessage(chatHistory);

                chatHistory.User = new User { Email = CurrentUserEmail };
                await hubConnection.SendAsync("SendMessageToGroup", currenGroupSelected, chatHistory);
                CurrentMessage = string.Empty;
            }
            await InvokeAsync(StateHasChanged);
        }

        else
        {
            // Handle the case when the connection is not active
            Console.WriteLine("Connection is not active.");
        }
    }


    async Task OpenUsers()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        DialogResult? result = await DialogService.Show<AddUserToGroup>("Add Members", closeOnEscapeKey).Result;

        if (result != null && !result.Canceled)
        {
            var data = result.Data as GroupChatDTO;
            // Dialog was submitted 
            var groupInput = data?.Name;
            Console.WriteLine($"{groupInput} hehehe");

            var selectedIds = data?.ParticipantIds;
            await HandleSubmit(groupInput, selectedIds);
        }

        else
        {
            // Dialog was closed or canceled
            Console.WriteLine("Dialog was closed or canceled.");
            // Handle the case where the dialog was canceled or closed without submitting
        }

    }
    // async Task OpenDialog()
    // {
    //     DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
    //     var result = await DialogService.Show<Dialog>("Create Group", closeOnEscapeKey).Result;
    //     if (result != null && !result.Cancelled)
    //     {
    //         // Dialog was submitted
    //         groupInput = result.Data?.ToString();
    //         Console.WriteLine(groupInput);
    //         // Handle the groupInput as needed
    //         await HandleSubmit(groupInput);
    //     }

    //     else
    //     {
    //         // Dialog was closed or canceled
    //         Console.WriteLine("Dialog was closed or canceled.");
    //         // Handle the case where the dialog was canceled or closed without submitting
    //     }
    // }
    // Method to Create a Group Chat


    private async Task HandleSubmit(string groupName, List<int>? selectedUsers)
    {
        GroupChatDTO input = new GroupChatDTO()
            {
                Name = groupName,
                ParticipantIds = selectedUsers ?? new List<int>()
            };

        // Assuming ClientGroupChatService.CreateGroupChat is responsible for saving to the database
        await ClientGroupChatService.AddGroupChat(input);
        //await ClientGroupChatService.AddMembers(input, selectedUsers);
        if (selectedUsers != null && selectedUsers.Any())
        {
            // Do something with the selected users
            foreach (var userId in selectedUsers)
            {
                // Perform actions with each selected user
                Console.WriteLine($"Selected User ID: {userId}");
                // You can fetch user details using the userId and perform any necessary actions
                var userDetails = await ClientUserService.GetUserById(userId);
                Console.WriteLine($"Selected User: {userDetails.Id}, {userDetails.Email}");
            }
        }
        await hubConnection.SendAsync("CreateGroup", input);

        StateHasChanged();
        _snackBar.Add(
            "Group Chat Created",
            Severity.Success,
            config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });
    }

    async Task LoadGroupChat(int groupId)
    {
        var groupName = await ClientGroupChatService.GetSingleGroupName(GroupchatId);
        if (GroupchatId != 0)
        {
            await hubConnection.SendAsync("Leave", groupName);
        }
        GroupchatId = groupId;
        string passGroupName = await ClientGroupChatService.GetSingleGroupName(GroupchatId);
        await hubConnection.SendAsync("Join", passGroupName);
        NavigationManager.NavigateTo($"groupchat/{GroupchatId}");

        groupChatMessage = new List<GroupChatMessage>();
        groupChatMessage = await ClientGroupChatService.GetGroupChatConversation(GroupchatId);
        getGroupMembers = await ClientGroupChatService.GetGroupMembers(GroupchatId);
        getGroupNotMembers = await ClientGroupChatService.GetNotMembers(GroupchatId);
        ToolBarText = passGroupName;

        StateHasChanged();
    }

    private async Task DeleteUserToGroup(int userId, int groupId)
    {


        if (hubConnection.State == HubConnectionState.Connected)
        {
            await ClientGroupChatService.RemoveUserToGroup(userId, groupId);
            string currentGroup = await ClientGroupChatService.GetSingleGroupName(GroupchatId);
            var usertoRemove = await ClientGroupChatService.GetSingleUser(userId);
            await hubConnection.SendAsync("RemoveUserToGroup", currentGroup, userId);
            Console.WriteLine(hubConnection.State);
            Console.WriteLine(hubConnection.ConnectionId);
            getGroupNotMembers = await ClientGroupChatService.GetNotMembers(groupId);
            _snackBar.Add(
                    "Group member deleted",
                    Severity.Success,
                config =>
                {
                    config.ShowTransitionDuration = 200;
                    config.HideTransitionDuration = 400;
                    config.VisibleStateDuration = 2500;
                });
            await InvokeAsync(StateHasChanged);
        }
        else 
        {
            Console.WriteLine("Connection is not active");
        }
    }
    private async Task AddUser(IEnumerable<int> userIds, int groupChatId)
    {
        foreach (var i in selectedUserIdsInt)
        {

            Console.WriteLine($"ID: {i}");
        }
        try
        {
            string currentGroup = await ClientGroupChatService.GetSingleGroupName(GroupchatId);
            foreach (var userId in userIds)
            {
                var newUser = new AddUserToGroupDTO()
                    {
                        UserId = userId,
                        GroupId = groupChatId
                    };

                var result = await ClientGroupChatService.AddUserToGroup(newUser);
                StateHasChanged();
                var userToAdd = await ClientGroupChatService.GetSingleUser(userId);

                Console.WriteLine($"Added Id {userId}");

                await hubConnection.SendAsync("AddToGroup", currentGroup, userToAdd);
                StateHasChanged();

            }
            getGroupNotMembers = await ClientGroupChatService.GetNotMembers(groupChatId);
            StateHasChanged();

        }

        catch (Exception ex)
        {
            // Log or handle the exception as needed
            Console.WriteLine($"An error occurred while adding users to the group: {ex.Message}");

            _snackBar.Add(
                "An error occurred while adding users to the group.",
                Severity.Error,
                config =>
                {
                    config.ShowTransitionDuration = 200;
                    config.HideTransitionDuration = 400;
                    config.VisibleStateDuration = 2500;
                });
        }
    }
       
}



