@page "/groupchat"
@page "/groupchat/{GroupchatId:int}"
@using System.Net.Http.Headers
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IClientChatMessageService ClientChatMessageService
@inject IClientUserService ClientUserService
@inject ILocalStorageService _localStorage
@inject IClientGroupChatService ClientGroupChatService
@inject ISnackbar _snackBar
@inject IJSRuntime _jsRuntime
@inject IDialogService DialogService

@rendermode InteractiveWebAssembly

<h3>Group Chat</h3>

<div class="d-flex flex-grow-1 flex-row">

    <MudPaper Elevation="25" Class="pa-3 ml-6 col-md-3">

        <MudToolBar Dense="true">
            @* <MudText Typo="Typo.h6" Inline="true" Class="mr-2">#</MudText> *@
            <MudText Typo="Typo.h6">CHAT ROOMS</MudText>
             <div style="position: absolute; right: 50px; width: 30px; height: 30px; border-radius: 50%;"

             <MudIconButton 
                    OnClick="@OpenUsers"
                    Icon="@Icons.Material.Filled.Add"
                    Color="Color.Inherit"
                    Variant="Variant.Filled"
                    Size="Size.Small"
                />
            </div>
        </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
            <MudList Clickable="true">
                @foreach (var groupChat in GroupChatList)
                {
                        <MudListItem Class="pa-0 px-2" OnClick="@(() => LoadGroupChat(groupChat.Id))">
                            <MudDivider />
                            @groupChat.Name
                            <MudDivider/>

                    </MudListItem> 
                }
            </MudList>
        </div>
    </MudPaper>

    <MudPaper Elevation="25" Class="py-4 flex-grow-1 col-md-6">
        
        <MudToolBar Dense="true">
            @if (!IsEditing)
            {
                <MudText Typo="Typo.h6">@CurrentGroupName</MudText>
            }
            else
            {
                <MudTextField @bind-Value="@CurrentGroupName" />

                <MudButton OnClick="@EditGroupName"
                    Color="Color.Primary"
                    Variant="Variant.Filled">
                    Save
                </MudButton>
            }

            <div class="d-flex justify-content-end">
                @if (CurrentUserId == Members.OwnerId.ToString())
                {
                    <MudIconButton 
                    OnClick="@ToggleEditMode"
                    Class="btn btn-link text-secondary px-1"
                    Icon="@Icons.Material.Filled.Edit">
                    </MudIconButton>

                    <MudIconButton OnClick="@(() => DeleteGroup(GroupchatId))"
                    Class="btn btn-link text-secondary px-1"
                    Icon="@Icons.Material.Filled.Delete">
                </MudIconButton>

                    <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
                        <MessageContent>
                            Are you sure you want to DELETE?
                        </MessageContent>
                        <YesButton>
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Error"
                                       Size="Size.Small">
                                DELETE
                            </MudButton>
                        </YesButton>
                    </MudMessageBox>
                    }
            </div>


        </MudToolBar>

        
        <div class="d-flex flex-column px-4" style="max-height: 65vh; min-height: 65vh; overflow: scroll;" id="chatContainer">

          
            @foreach (var message in groupChatMessage)
            {

                <div class="d-flex flex-row my-4 @((message?.User?.Id.ToString() == CurrentUserId) ? "justify-content-end" : "")">

                    <div class="mr-4">
                        <MudAvatar Color="Color.Secondary" Style="height:50px; width:50px;">
                            <MudImage Src="@message.User.Avatar"></MudImage>
                        </MudAvatar>
                    </div>

                    <div class="@((message?.User?.Id.ToString() == CurrentUserId) ? "text-right" : "")">

                        <MudText Typo="Typo.body1">@message.User.Email</MudText>
                            <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.Timestamp</MudText>
                            <MudText Typo="Typo.body2" Style="padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">
                                @message.Content
                        </MudText>
                    </div>
                </div>
            }
        </div>
            
   
            <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">

                <MudTextField T="string"
                              Placeholder="Enter your message..."
                              DisableUnderLine="true"
                              Class="mt-n2 mx-4"
                              @bind-Value="CurrentMessage"
                              For="@(()=> CurrentMessage)" />

                @if (GroupchatId == 0)
                {
                    <MudButton OnClick="SubmitAsync"
                               Disabled="true"
                               StartIcon="@Icons.Material.Outlined.Send"
                               Color="Color.Secondary"
                               ButtonType="ButtonType.Button">
                        Send
                    </MudButton>
                }
                else
                {
                    <MudButton OnClick="SubmitAsync"
                               StartIcon="@Icons.Material.Outlined.Send"
                               Color="Color.Secondary"
                               ButtonType="ButtonType.Button">
                        Send
                    </MudButton>
                }
               

            </MudPaper>
   </MudPaper>

    <MudPaper Elevation="25" Class="pa-3 ml-6 col-md-3">

        <MudToolBar Dense="true">
            <MudText Typo="Typo.h6" Inline="true" Class="mr-2"></MudText>
            

            <MudSelect T="int" Label="Users" MultiSelection="true" @bind-SelectedValues="selectedUserIdsInt">
                @foreach (User user in getGroupNotMembers)
                {
                    <MudSelectItem T="int" Value="@user.Id">@user.Email</MudSelectItem>
                }
            </MudSelect>
             @if (CurrentUserId == Members.OwnerId.ToString())
              {
                <MudTd DataLabel="Add">

                <MudButton 
                    Variant="Variant.Filled" 
                    Color="Color.Primary" 
                    OnClick="@(() => AddUser(selectedUserIdsInt, GroupchatId))">
                    Add
                </MudButton>
                </MudTd>
                }
            <MudTd DataLabel="Delete">
                <MudButton 
                    OnClick="@(() => DeleteUserToGroup(int.Parse(CurrentUserId), GroupchatId))"
                    Color="Color.Error"
                    Variant="Variant.Filled"> Leave
                </MudButton>
            </MudTd>

        </MudToolBar>

        <div class="d-flex flex-column px-4" style="max-height:70vh;min-height:70vh; overflow:scroll;">
            <MudList Clickable="true">
                @foreach (var groupMember in Members.users)
                {
                    @if (groupMember.Id == Members.OwnerId) continue;
                    <MudListItem Class="pa-0 px-2">
                        <div class="d-flex flex-row mt-n1 mb-n1">

                                <MudAvatar 
                                    Class="mb-4"
                                    Color="Color.Secondary"  
                                    Style="height:50px; width:50px;">
                                    <MudImage Src="@groupMember.Avatar"></MudImage>
                                </MudAvatar>

                            <div>
                                <MudText Typo="Typo.body2" Class="mt-3 mb-n2 ml-2">@groupMember.Email</MudText>
                                <MudText Typo="Typo.body2" Class="mt-3 mb-n2 ml-2">@groupMember.Id</MudText>

                            </div>

                                @if (int.Parse(CurrentUserId) == Members.OwnerId)
                            {
                                <div style="position: absolute; right: 50px; width: 30px; height: 30px; border-radius: 50%;">
                                    <MudTd DataLabel="Delete">
                                        <MudIconButton 
                                        OnClick="(() => DeleteUserToGroup(groupMember.Id, GroupchatId))"
                                        Icon="@Icons.Material.Filled.Delete"
                                        Color="Color.Error"
                                        Variant="Variant.Filled">
                                        </MudIconButton>
                                    </MudTd>
                                </div>
                            }
                        </div>
                    </MudListItem>
                }
            </MudList>
        </div>
    </MudPaper>

</div>

@code 
{
    [Parameter]
    public int GroupchatId { get; set; }
    [Parameter]
    public string CurrentMessage { get; set; }
    [Parameter]
    public string CurrentUserId { get; set; }
    [Parameter]
    public string CurrentGroupName{ get; set; }
    [Parameter]
    public string CurrentUserEmail { get; set; }

    [CascadingParameter]
    private HubConnection hubConnection { get; set; }
    public List<GroupChat> GroupChatList = new List<GroupChat>();

    private IEnumerable<User> selectedUserIds { get; set; } = new HashSet<User>();
    private IEnumerable<int> selectedUserIdsInt { get; set; } = new HashSet<int>();

    MudMessageBox mbox { get; set; }
    string state = "Message box hasn't been opened yet";

    public List<GroupChatMessage> groupChatMessage = new List<GroupChatMessage>();
    public List<User> Users = new List<User>();
    public List<User> getGroupMembers = new List<User>();
    public List<User> getGroupNotMembers = new List<User>();
    public GetChatMembersDTO Members = new GetChatMembersDTO();
    public string ToolBarText { get; set; } = "Chat Rooms";
    public bool IsEditing = false;
    private bool IsHubConnected => hubConnection?.State == HubConnectionState.Connected;


    protected override async Task OnInitializedAsync()
    {
        GroupChatList = await ClientGroupChatService.GetAllGroupsForUser();

        CurrentUserId = await ClientUserService.GetSingleUserId();

        CurrentUserEmail = await ClientUserService.GetSingleUserName();

        CurrentGroupName = await ClientGroupChatService.GetSingleGroupName(GroupchatId);

        
        

        string token = await _localStorage.GetItemAsStringAsync("token");
        string foo = "Bearer " + token.Replace("\"", "");

        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"), options  => {
                options.AccessTokenProvider = async () => await _localStorage.GetItemAsStringAsync("token");
            }).WithAutomaticReconnect().Build();
        } 

        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }

        hubConnection.On<GroupChat>("ReceiveNewGroupChat", async (newGroupChat) =>
        {
            // Handle the new group chat notification
            GroupChatList.Add(newGroupChat);
            getGroupMembers.AddRange(newGroupChat.Paticipants);
            Console.WriteLine($"GC add: {newGroupChat.Name}");
            Console.WriteLine($"GC Id: {newGroupChat.Id}");
            StateHasChanged();
        });

        hubConnection.On<int,GroupChatNameDTO>("UpdateGroupName", async (groupId, newGroupChat) =>
       {
           var groupChatToUpdate = GroupChatList.FirstOrDefault(g => g.Id == groupId);
           if (groupChatToUpdate != null)
           {
               // Update the name of the found group chat
               groupChatToUpdate.Name = newGroupChat.Name;

               // Optionally, you may trigger a UI update here based on your application's structure
               // For example, if using Blazor, you might use StateHasChanged()
               StateHasChanged(); // Make sure to use this appropriately for your UI framework
           }
       });

        hubConnection.On<User>("AddUserToGroupChat", async (message) =>
           {
               Console.WriteLine("Received Message Connected: Connection ID: " + hubConnection.ConnectionId);
               Members.users.Add(new User
                   {
                       Email = message.Email,
                       Avatar = message.Avatar,
                       Id = message.Id
                   });

               await InvokeAsync(StateHasChanged);
               Console.WriteLine($"Added user {message.Email}");
           });

        hubConnection.On<int>("RemoveUser", async (userId) =>
        {
            Console.WriteLine("Received Message Connected: Connection ID: " + hubConnection.ConnectionId);

            Members.users.RemoveAll(user => user.Id == userId);

            Console.WriteLine($"User removed: {userId}");

            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("DeleteGroupChatHub", async (groupId) =>
        {
            Console.WriteLine("Received Message Connected: Connection ID: " + hubConnection.ConnectionId);

            GroupChatList.RemoveAll(user => user.Id == groupId);

            Console.WriteLine($"Group removed: {groupId}");

            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<GroupChatMessage>("ReceivedGroupMessage", async (message) =>
         {
             Console.WriteLine("Received Message Connected: Connection ID: " + hubConnection.ConnectionId);
             if (GroupchatId == message.GroupChatId)
             {
                 groupChatMessage.Add(new GroupChatMessage
                     {
                         Content = message.Content,
                         Timestamp = message.Timestamp,
                         User = message.User
                     });
             
             }
             await InvokeAsync(StateHasChanged);

         });


        if (!string.IsNullOrEmpty(GroupchatId.ToString()))
        {
            await LoadGroupChat(GroupchatId);
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatContainer");
    }

    public async Task SubmitAsync()
    {
        string currenGroupSelected = await ClientGroupChatService.GetSingleGroupName(GroupchatId);

        if (hubConnection.State == HubConnectionState.Connected)
        {
            if (!string.IsNullOrEmpty(CurrentMessage) && GroupchatId != 0)
            {
                //Save Message to DB
                var chatHistory = new GroupChatMessage()
                    {
                        Content = CurrentMessage,
                        GroupChatId = GroupchatId,
                        Timestamp = DateTime.Now,

                    };

                var user = await ClientGroupChatService.GetSingleUser(int.Parse(CurrentUserId));
                chatHistory.User = user;

                await ClientGroupChatService.SaveMessage(chatHistory);

                await hubConnection.SendAsync("SendMessageToGroup", currenGroupSelected, chatHistory);
                CurrentMessage = string.Empty;
            }   
            StateHasChanged();
        }

        else
        {
            // Handle the case when the connection is not active
            Console.WriteLine("Connection is not active.");
        }
    }
    async Task ToggleEditMode()
    {
        IsEditing = !IsEditing;

        var currentName = CurrentGroupName;

        Console.WriteLine(currentName);

        if (IsEditing)
        {
            Console.WriteLine("Entering Edit Mode");
        }
        else
        {

            await EditGroupName();
        }
    }

    async Task EditGroupName()
    {
        IsEditing = false;

        var input = new GroupChatNameDTO
            {
                Name = CurrentGroupName
            };

        Console.WriteLine(CurrentGroupName, GroupchatId);

        await ClientGroupChatService.UpdateGroupChat(GroupchatId, input);
        var groupName = await ClientGroupChatService.GetSingleGroupName(GroupchatId);
        await hubConnection.SendAsync("GroupNameUpdated", GroupchatId, input);

        StateHasChanged();

        _snackBar.Add(
            "Group Chat Renamed",
            Severity.Success,
            config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });

    }
    async Task OpenUsers()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        DialogResult? result = await DialogService.Show<AddUserToGroup>("Add Members", closeOnEscapeKey).Result;

        if (result != null && !result.Canceled)
        {
            var data = result.Data as GroupChatDTO;
            // Dialog was submitted 
            var groupInput = data?.Name;

            var selectedIds = data?.ParticipantIds;
            await HandleSubmit(groupInput, selectedIds);
        }

        else
        {
            // Dialog was closed or canceled
            Console.WriteLine("Dialog was closed or canceled.");
            // Handle the case where the dialog was canceled or closed without submitting
        }

    }


    private async Task HandleSubmit(string groupName, List<int>? selectedUsers)
    {

        GroupChatDTO input = new GroupChatDTO()
            {
                Name = groupName,
                ParticipantIds = selectedUsers ?? new List<int>()
            };

        // Assuming ClientGroupChatService.CreateGroupChat is responsible for saving to the database
        await ClientGroupChatService.AddGroupChat(input);
        //await ClientGroupChatService.AddMembers(input, selectedUsers);
        if (selectedUsers != null && selectedUsers.Any())
        {
            // Do something with the selected users
            foreach (var userId in selectedUsers)
            {
                // Perform actions with each selected user
                Console.WriteLine($"Selected User ID: {userId}");
                // You can fetch user details using the userId and perform any necessary actions
                var userDetails = await ClientUserService.GetUserById(userId);
                Console.WriteLine($"Selected User: {userDetails.Id}, {userDetails.Email}");
            }
        }
        await hubConnection.SendAsync("CreateGroup", input);

        StateHasChanged();
        _snackBar.Add(
            "Group Chat Created",
            Severity.Success,
            config =>
            {
                config.ShowTransitionDuration = 200;
                config.HideTransitionDuration = 400;
                config.VisibleStateDuration = 2500;
            });
    }

    async Task LoadGroupChat(int groupId)
    {

        if (hubConnection.State == HubConnectionState.Connected)
        {
            Console.WriteLine($"Connected: Connection ID: {hubConnection.ConnectionId}");

            var groupName = await ClientGroupChatService.GetSingleGroupName(groupId);
            StateHasChanged();

            if (GroupchatId != 0)
            {
                await hubConnection.SendAsync("Leave", groupName);
            }

            GroupchatId = groupId;

            string passGroupName = await ClientGroupChatService.GetSingleGroupName(GroupchatId);
            await hubConnection.SendAsync("Join", passGroupName);
            NavigationManager.NavigateTo($"groupchat/{GroupchatId}");

            groupChatMessage = new List<GroupChatMessage>();
            groupChatMessage = await ClientGroupChatService.GetGroupChatConversation(groupId);
            Members = await ClientGroupChatService.GetGroupChatMembers(groupId);
            getGroupNotMembers = await ClientGroupChatService.GetNotMembers(groupId);
            CurrentGroupName = groupName;
            StateHasChanged();
        }
    }

    async Task AddUser(IEnumerable<int> userIds, int groupChatId)
    {
        foreach (var userId in userIds)
        {
            var newUser = new AddUserToGroupDTO()
                        {
                            UserId = userId,
                            GroupId = groupChatId
                        };

            var result = await ClientGroupChatService.AddUserToGroup(newUser);
            string currentGroup = await ClientGroupChatService.GetSingleGroupName(GroupchatId);
            var userToAdd = await ClientGroupChatService.GetSingleUser(newUser.UserId);
            Console.WriteLine("Before connection check");
            if (hubConnection.State == HubConnectionState.Disconnected)
            {
                Console.WriteLine("Connection is disconnected. Starting...");
                await hubConnection.StartAsync();
            }
            Console.WriteLine("After connection check");
            Console.WriteLine(hubConnection.State);
            if (hubConnection.State == HubConnectionState.Connected)
            {
                await hubConnection.SendAsync("AddToGroupChat", currentGroup, userToAdd);
            }
            getGroupNotMembers = await ClientGroupChatService.GetNotMembers(GroupchatId);
        }
        StateHasChanged();
        selectedUserIdsInt = new HashSet<int>();
    }

    private async Task DeleteGroup(int groupId) 
    {
        bool? result = await mbox.Show();
        state = result == null ? "No" : "Yes";
        if (state == "Yes")
        {
            if (hubConnection.State == HubConnectionState.Connected)
            {
                await ClientGroupChatService.DeleteGroupChat(groupId);
                await hubConnection.SendAsync("DeleteGroup", groupId);
                _snackBar.Add(
                           "Group deleted",
                           Severity.Success,
                       config =>
                       {
                           config.ShowTransitionDuration = 200;
                           config.HideTransitionDuration = 400;
                           config.VisibleStateDuration = 2500;
                       });
                StateHasChanged();
            }
        }
        else
        {
            Console.WriteLine("Connection is not active");
        }

    }
    private async Task DeleteUserToGroup(int userId, int groupId)
    {


        if (hubConnection.State == HubConnectionState.Connected)
        {
            await ClientGroupChatService.RemoveUserToGroup(userId, groupId);
            string currentGroup = await ClientGroupChatService.GetSingleGroupName(GroupchatId);
            var usertoRemove = await ClientGroupChatService.GetSingleUser(userId);
            await hubConnection.SendAsync("RemoveUserToGroup", currentGroup, userId);
            getGroupNotMembers = await ClientGroupChatService.GetNotMembers(groupId);
            _snackBar.Add(
                    "Group member removed",
                    Severity.Success,
                config =>
                {
                    config.ShowTransitionDuration = 200;
                    config.HideTransitionDuration = 400;
                    config.VisibleStateDuration = 2500;
                });
            StateHasChanged();
        }
        else 
        {
            Console.WriteLine("Connection is not active");
        }
    }

    // async Task RemoveGroup(string groupName)
    // {

    //     await hubConnection.SendAsync("Leave", groupName);
    //     Console.WriteLine($"You LEAVE with ID: {hubConnection.ConnectionId}");
    // }
       
}



